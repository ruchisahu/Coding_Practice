package Chap_8;

import java.util.Arrays;

import util.util;

public class RadixSort {
	private static void Sort(int[] array) {
		int digit=countDigit(array);
		for(int i=0;i<digit;i++) {
			countingSort(array,i);
		}
		
	}

	public static void countingSort(int[] A, int k) {
		int[] C=new int[10];
		int[] B=new int[A.length];
		
		for(int i=0;i<C.length;i++)
			C[i]=0;
		
		for(int i=0;i<A.length;i++) {
			C[A[i]]=C[A[i]]+1;
		}
		for (int i = 1; i < C.length; i++) {
			C[i] += C[i - 1];
		}
		
		for(int j=A.length-1;j>=0;j--) {
			B[C[A[j]]-1]=A[j];
			C[A[j]]--;
		}
		
		
	}
	
	//
	public static void countingSort2(int[] a, int w) {
    int n = a.length;
    int R = 256;   // extend ASCII alphabet size
    int[] aux = new int[n];

    for (int d = w-1; d >= 0; d--) {
        // sort by key-indexed counting on dth character

        // compute frequency counts
        int[] count = new int[R+1];
        for (int i = 0; i < n; i++)
            count[a[i]]++;

        // compute cumulates
        for (int r = 0; r < R; r++)
            count[r+1] += count[r];

        // move data
        for (int i = 0; i < n; i++)
            aux[count[a[i]-1]] = a[i];

        // copy back
        for (int i = 0; i < n; i++)
            a[i] = aux[i];
    }
}

	public int getdigit(int i, int d)
	{
	    while (d > 1) {
	        d--;
	        i/=10;
	    }
	 
	    return i%10;
	}

	private static int countDigit(int[] array) {
		int digit=0;
		for(int item:array) {
			int d=(int) Math.ceil(Math.log10(item));
			if(d>digit)
				digit=d;
		}
		return digit;
	}

	public static void main(String[] args) {
		System.out.println("\nRadix Sort test");
		int[] array = new int[5];
		util.fillWithRandomInts(array);
		System.out.println(Arrays.toString(array));
		Sort(array);
		System.out.println(Arrays.toString(array));

	}

	

}
