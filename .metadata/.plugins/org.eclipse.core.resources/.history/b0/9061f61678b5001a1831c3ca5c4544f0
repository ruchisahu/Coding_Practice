/*
 You are given an undirected connected graph. An articulation point (or cut vertex) is defined as a vertex which, when removed along with associated edges, makes the graph disconnected (or more precisely, increases the number of connected components in the graph). The task is to find all articulation points in the given graph.

Input:
The input to the function/method consists of three arguments:

numNodes, an integer representing the number of nodes in the graph.
numEdges, an integer representing the number of edges in the graph.
edges, the list of pair of integers - A, B representing an edge between the nodes A and B.

Output:
Return a list of integers representing the critical nodes.

Example:

Input: numNodes = 7, numEdges = 7, edges = [[0, 1], [0, 2], [1, 3], [2, 3], [2, 5], [5, 6], [3, 4]]
 */

import java.util.*;



public class CriticalRouters {
	static int time = 0;
	private static List<Integer> getCriticalNodes(int[][] links, int numLinks, int numRouters) {
		time = 0;
		Map<Integer, Set<Integer>> map = new HashMap<>();
		for(int i=0;i<numRouters;i++) {
			map.put(i, new HashSet<>());
		}
		for(int[] link : links) {
			map.get(link[0]).add(link[1]);
			map.get(link[1]).add(link[0]);
		}
		Set<Integer> set = new HashSet<>();
		int[] low = new int[numRouters];
		int[] ids = new int[numRouters];
		int parent[] = new int[numRouters]; 
		Arrays.fill(ids, -1);
		Arrays.fill(parent, -1);
		for(int i=0;i<numRouters;i++) {
			if(ids[i] == -1)
				dfs(map, low, ids, parent, i, set);
		}
		 Iterator<Integer> i=set.iterator();  
	        while(i.hasNext())  
	        {  
	        System.out.println(i.next());  
	        }  
		return new ArrayList<>(set);
	}



	private static void dfs(Map<Integer, Set<Integer>> map, int[] low, int[] ids, int[] parent, int cur, Set<Integer> res) {
		int children = 0; 
		ids[cur] = low[cur]= ++time;
		for(int nei : map.get(cur)) {
			if(ids[nei] == -1) {
				children++;
				parent[nei] = cur;
				dfs(map, low, ids, parent,nei, res);
				low[cur] = Math.min(low[cur], low[nei]);
				if((parent[cur] == -1 && children > 1) || (parent[cur] != -1 && low[nei] >= ids[cur]))
					res.add(cur);
			}
			else if(nei != parent[cur])
				low[cur] = Math.min(low[cur], ids[nei]);
		}
	}

	public static void main(String[] args) {
		
		int numRouters1 = 7;
		int numLinks1 = 7;
		int[][] links1 = {{0, 1}, {0, 2}, {1, 3}, {2, 3}, {2, 5}, {5, 6}, {3, 4}};
		getCriticalNodes(links1, numLinks1, numRouters1);

	}

}
//sol2
/*
private int time = 0; // current time of discovery



    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {

        List<Integer>[] graph = new ArrayList[n];

        for (int i = 0; i < n; i++) {

            graph[i] = new ArrayList<>();

        }



        for (List<Integer> conn : connections) {

            int n1 = conn.get(0);

            int n2 = conn.get(1);

            graph[n1].add(n2);

            graph[n2].add(n1);

        }



        int[] disc = new int[n]; // discovery time of each node

        int[] low = new int[n]; // earliest discovered node reachable from this node in DFS

        boolean[] visited = new boolean[n]; // whether this node has been visited in DFS

        List<List<Integer>> out = new ArrayList<>();



        for (int i = 0; i < n; i++) {

            if (!visited[i]) {

                dfs(i, -1, disc, low, visited, graph, out);

            }

        }



        return out;

    }



    // root = current node under consideration

    // parent = parent of current node

    private void dfs(int root, int parent, int[] disc, int[] low, boolean[] visited, List<Integer>[] graph, List<List<Integer>> out) {

        visited[root] = true;

        disc[root] = time++;

        low[root] = disc[root]; // we don't have to initialize low[] to inf because of this line



        for (Integer nei : graph[root]) {

            if (nei == parent) {

                continue;

            }



            if (!visited[nei]) {

                dfs(nei, root, disc, low, visited, graph, out);

                low[root] = Math.min(low[root], low[nei]);

                if (disc[root] < low[nei]) {

                    out.add(Arrays.asList(root, nei));

                }

            } else {

                low[root] = Math.min(low[root], disc[nei]);

            }

        }

    }

}



https://leetcode.com/discuss/interview-question/417213/
*/