/*
 * Given a matrix with r rows and c columns, find the maximum score of a path starting at [0, 0] and ending at [r-1, c-1]. 
The score of a path is the minimum value in that path. For example, the score of the path 8 → 4 → 5 → 9 is 4.

Don't include the first or final entry. You can only move either down or right at any point in time.

Example 1:

Input:
[[5, 1],
 [4, 5]]

Output: 4
Explanation:
Possible paths:
5 → 1 → 5 => min value is 1
5 → 4 → 5 => min value is 4
Return the max value among minimum values => max(4, 1) = 4.

  */
import java.util.*;


public class MaxOfMin {
	public static int maxScore;
	//minor error
	  public  static int maxScore2D(int[][] grid)
	  {
	  
	      maxScore = Integer.MIN_VALUE;
	      int min = Integer.MAX_VALUE;
	      dfs(grid, 0, 0,  min);
	      return maxScore;
	  }
	  
	  private static void dfs(int[][] grid, int i, int j, int min)
	  {
      if (i<0 || i>=grid.length || j<0 ||j>=grid[0].length)
	          return;
	    if(i<0 && j<0 || i>grid.length-1 &&j>grid[0].length-1)
	    {
	    	System.out.println("........................");
	    }
	    else
	    {
	    	System.out.println("grid="+grid[i][j]);
	        min = Math.min(min, grid[i][j]);
	    System.out.println("min="+min);
	    }
	    if (i== grid.length-1 && j==grid[0].length-1)
	      maxScore = Math.max(maxScore, min);
	    dfs(grid, i+1,j,min);
	    dfs(grid,i,j+1,min);
	  }
	  



	  public static int DPMaximumScore(int[][] input) {
	        if (input.length < 1 && input[0].length < 1) {
	            return -1;
	        }
	        
	        // c[i][j] maintains the maximum score for an input array of size i and j
	        int[][] c = new int[input.length][input[0].length];

	        c[0][0] = Integer.MAX_VALUE;
	        c[0][1] = Integer.MAX_VALUE;
	        c[1][0] = Integer.MAX_VALUE;
	        
	        // Fill first row 
	        if (input[0].length > 2) {
	            for (int i = 2; i < input[0].length; i++) {
	                c[0][i] = Math.min(c[0][i - 1], input[0][i - 1]);
	            }
	        }
	        // Fill first column
	        if (input.length > 2) {
	            for (int i = 2; i < input.length; i++) {
	                c[i][0] = Math.min(c[i - 1][0], input[i - 1][0]);
	            }
	        }

	        for (int i = 1; i < input.length; i++) {
	            for (int j = 1; j < input[0].length; j++) {
	                c[i][j] = Math.max(Math.min(c[i-1][j], input[i-1][j]), Math.min(c[i][j-1], input[i][j-1]));
	            }
	        }

	        return c[input.length-1][input[0].length-1];
	    
		  }

	  
	  //
		public int maxPathScore2(int[][] arr) {
			int[][] dp = new int[arr.length][arr[0].length]; 
		        
		        for(int i = 0; i < dp.length; i++) {
		            for(int j = 0; j < dp[i].length; j++) {
		                if(i == dp.length - 1 && j == dp[i].length - 1) {
		                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); 
		                    continue;
		                }
		                if(i == 0 && j == 0) {
		                    dp[i][j] = Integer.MAX_VALUE;
		                    continue; 
		                } 
		                int top =  i > 0 ? dp[i - 1][j] : Integer.MIN_VALUE; 
		                int left = j > 0 ? dp[i][j - 1] : Integer.MIN_VALUE; 
		                dp[i][j] = Math.max(Math.min(top, arr[i][j]), Math.min(left, arr[i][j])); 
		            }
		        }
		        
		        return dp[dp.length - 1][dp[0].length - 1]; 	
			}
	public static void main(String[] args) {
		MaxOfMin m=new MaxOfMin();
		 int[][] grid1 = new int[][] { {5, 1}, {4, 5} };                        // 4
		    int[][] grid2 = new int[][] { {5, 1, 7}, {4, 8, 5} };                  // 4
		    int[][] grid3 = new int[][] { {1, 9, 9}, {9, 9, 9}, {9, 9, 9} };       // 1 (if the first entry is not considered)
		    int[][] grid4 = new int[][] { {10, 7, 3}, {12, 11, 9}, {1, 2, 8} };    // 8 (same reason)
		    int[][] grid5 = new int[][] { {20, 20, 3}, {20, 3, 20}, {3, 20, 20} }; // 3
		  //  System.out.println("grid1: Expected: 4, Actual: " + m.maxScore2D(grid1));
		   // System.out.println("grid2: Expected: 4, Actual: " + maxScore2D(grid2));
		   // System.out.println("grid3: Expected: 1, Actual: " + maxScore2D(grid3) + " (if the first entry is not considered)");
		 //   System.out.println("grid4: Expected: 8, Actual: " + maxScore2D(grid4) + " (same reason)");
		//    System.out.println("grid5: Expected: 3, Actual: " + maxScore2D(grid5));
		    int[][] grid6={{0, 1},{0, 2},{1, 3},{2, 3},{2, 5},{5, 6},{3, 4}};
		    System.out.println("grid1: Expected: 0, Actual: " + m.maxScore2D(grid6));
		    
		    int[][] grid7={{10, 5, 3}};
		    System.out.println("grid1: Expected: 3, Actual: " + m.maxScore2D(grid7));
		

	}

}
