import java.util.HashMap;

/*
 * Given a list of positive integers nums and an int target, return indices of the two numbers such that they add up to a target - 30.

Conditions:

    You will pick exactly 2 numbers.
    You cannot pick the same element twice.
    If you have muliple pairs, select the pair with the largest number.

Example 1:

Input: nums = [1, 10, 25, 35, 60], target = 90
Output: [2, 3]
Explanation:
nums[2] + nums[3] = 25 + 35 = 60 = 90 - 30

 * */
public class PairWGivenSum 
{
	private static int[] Find2Sum(int[] nums, int target) 
	{
	  int[] result=new int[2];
	  HashMap<Integer, Integer>count=new   HashMap<Integer, Integer>();
	  for(int i=0;i<nums.length;i++)
	  {
		 if(count.containsKey(nums[i]))
        {
        	 result[1]=i;
        	 result[0]=count.get(nums[i]);
	    }
        else
        {
        	 count.put(target-nums[i], i);
        }
        	
		
	  
	  }
	  System.out.println(result[0]+"   "+result[1]);
	  return result;
	}

	public static void main(String[] args) {
		int[] nums= {20,30,40,50,10};
		int target=90 -60;
		Find2Sum(nums, target);

	}

}
