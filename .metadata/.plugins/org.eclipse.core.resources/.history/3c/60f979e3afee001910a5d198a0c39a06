import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.*;
class WordNode
{
    String word;
    int numSteps;
 
    public WordNode(String word, int numSteps){
        this.word = word;
        this.numSteps = numSteps;
    }
}
public class wordladded 
{
	public static int ladderLength(String beginWord, String endWord, List<String> wordDict)
	{
		// public int ladderLength(String beginWord, String endWord, Set<String> wordDict) {
		        LinkedList<WordNode> queue = new LinkedList<WordNode>();
		        queue.add(new WordNode(beginWord, 1));
		 
		        wordDict.add(endWord);
		 
		        while(!queue.isEmpty())
		        {
		            WordNode top = queue.remove();
		            String word = top.word;
		 
		            if(word.equals(endWord))
		            {
		                return top.numSteps;
		            }
		 
		            char[] arr = word.toCharArray();
		            for(int i=0; i<arr.length; i++){
		                for(char c='a'; c<='z'; c++){
		                    char temp = arr[i];
		                    if(arr[i]!=c){
		                        arr[i]=c;
		                    }
		 
		                    String newWord = new String(arr);
		                    if(wordDict.contains(newWord)){
		                        queue.add(new WordNode(newWord, top.numSteps+1));
		                        wordDict.remove(newWord);
		                    }
		 
		                    arr[i]=temp;
		                }
		            }
		        }
		 
		        return 0;
	}
	public static int ladderLength1(String beginWord, String endWord, List<String> wordList) {
	    Set<String> wordSet=new HashSet<>(wordList);
	    Set<String> reached=new HashSet<>();
	    reached.add(beginWord);
	    wordSet.remove(beginWord);
	    int level=1;
	    while(!reached.isEmpty()) {
	    	Set<String> reachedNext=new HashSet<>();
	    	for(String s:reached) {
	    		for(int i=0;i<s.length();i++) {
	    			char[] c=s.toCharArray();
	    			for(char j='a';j<='z';j++) {
	    				c[i]=j;
	    				String newS=new String(c);
	    				if(wordSet.remove(newS)) {
	    					reachedNext.add(newS);
	    					if(endWord.equals(newS)) return level+1;
	    				}
	    			}
	    		}
	    	}
	    	reached=reachedNext;
	    	level++;
	    }
	    return 0;
	}
	public static void main(String[] args) 
	{
		String beginWord="hit";
		String endWord="cog";
		//["hot","dot","dog","lot","log","cog"]
		List<String> wordList=new ArrayList<String>();
		wordList.add("hot");
		wordList.add("dot");
		wordList.add("dog");
		wordList.add("lot");
		wordList.add("log");
		//wordList.add("cog");
		
		
		//wordList.add("hot");
		System.out.println(ladderLength(beginWord,endWord,wordList));
		
		System.out.println(ladderLength1(beginWord,endWord,wordList));
	}

}
